version: 2

references:
  container_config: &container_config
    docker:
      - image: aeternity/infrastructure:master
    working_directory: /infrastructure
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure

  machine_config: &machine_config
    machine:
      docker_layer_caching: true
    working_directory: /home/circleci/infrastructure
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure

  pull_current_image: &pull_current_image
    run:
      name: Pull current branch Docker image
      command: |
        docker pull ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?}

  setup_terraform: &setup_terraform
    run:
      name: Setup Terraform
      command: make setup-terraform

  setup_node: &setup_node
    run:
      name: Setup node
      command: make setup-node

  setup_monitoring: &setup_monitoring
    run:
      name: Install monitoring tools
      command: make setup-monitoring

  build_images: &build_images
    run:
      name: Build images
      command: make images

  check_seed_peers: &check_seed_peers
    run:
      name: Check seed peers
      command: make check-seed-peers

  fail_notification: &fail_notification
    run:
      name: Send failure notification
      environment:
        NOTIFY_BRANCH: master
        HOOK_TEMPLATE: |
          {
            "text": "CircleCI job **%s** failed on branch **%s** by @%s",
            "attachments": [
              {
                "title": "Build Link",
                "title_link": "%s",
                "color": "#FAD6D6"
              }
            ]
          }
      command: |
        if [ -n "$CIRCLE_BRANCH" -a "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
          HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
          curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL:?} --data "${HOOK_DATA:?}"
        fi
      when: on_fail

jobs:
  build_check:
    <<: *machine_config
    steps:
      - checkout
      - run:
          name: Build and push Docker image to DockerHub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?} .
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?}
      - run:
          name: Configuration lint
          command: .circleci/docker-run.sh make lint
      - run:
          name: Prepare Ansible test environment
          command: |
            # Cleanup ansible environment on "remote" host. Order is important.
            sudo apt-get remove python-urllib3 python-setuptools
            sudo apt-get update && sudo apt-get install -y python-dev python-pip
            sudo /usr/bin/pip2 install -U setuptools
            # Allow ansible runs from "controller" host
            pip install -r requirements.txt
            ansible-galaxy install -r ansible/requirements.yml
      - run:
          name: Test ansible setup playbook
          command: |
            .circleci/test-ansible-playbook.sh ansible/setup.yml
      - run:
          name: Test ansible monitoring playbook
          command: |
            .circleci/test-ansible-playbook.sh ansible/monitoring.yml
      - run:
          name: Test ansible deploy playbook
          command: |
            .circleci/test-ansible-playbook.sh ansible/setup.yml -e env=test
      - *fail_notification

  setup_terraform:
    <<: *container_config
    steps:
      - *setup_terraform
      - *fail_notification

  setup_uat:
    <<: *container_config
    environment:
      - DEPLOY_ENV: uat
    steps:
      - *setup_node
      - *setup_monitoring
      - *check_seed_peers
      - *fail_notification

  setup_integration:
    <<: *container_config
    environment:
      - DEPLOY_ENV: integration
    steps:
      - *setup_node
      - *setup_monitoring
      - *fail_notification

  setup_fast_integration:
    <<: *container_config
    environment:
      - DEPLOY_ENV: fast_integration
    steps:
      - *setup_node
      - *setup_monitoring
      - *fail_notification

  setup_dev1:
    <<: *container_config
    environment:
      - DEPLOY_ENV: dev1
    steps:
      - *setup_node
      - *fail_notification

  setup_dev2:
    <<: *container_config
    environment:
      - DEPLOY_ENV: dev2
    steps:
      - *setup_node
      - *fail_notification

  build_images:
    <<: *container_config
    steps:
      - *build_images

  docker_push_latest:
    <<: *machine_config
    steps:
      - *pull_current_image
      - run:
          name: Tag and push Docker "latest" image to DockerHub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?} ${DOCKERHUB_REPO:?}:latest
            docker push ${DOCKERHUB_REPO:?}:latest
      - *fail_notification

  check_seed_peers:
    <<: *container_config
    steps:
      - *check_seed_peers
      - *fail_notification

workflows:
  version: 2
  check_deploy:
    jobs:
      - build_check:
          requires: []

      - setup_terraform:
          requires:
            - build_check
          filters:
            branches:
              only: master

      - setup_uat:
          requires:
            - build_check
            - setup_terraform
          filters:
            branches:
              only: master

      - setup_integration:
          requires:
            - build_check
            - setup_terraform
          filters:
            branches:
              only: master

      - setup_fast_integration:
          requires:
            - build_check
            - setup_terraform
          filters:
            branches:
              only: master

      - setup_dev1:
          requires:
            - build_check
            - setup_terraform
          filters:
            branches:
              only: master

      - setup_dev2:
          requires:
            - build_check
            - setup_terraform
          filters:
            branches:
              only: master

      - docker_push_latest:
          requires:
            - build_check
          filters:
            branches:
              only: master

  daily_deploy:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - setup_terraform
      - setup_uat:
          requires:
            - setup_terraform
      - setup_dev1:
          requires:
            - setup_terraform
      - setup_dev2:
          requires:
            - setup_terraform
      - setup_integration:
          requires:
            - setup_terraform
      - setup_fast_integration:
          requires:
            - setup_terraform

  hourly_seeds_check:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - check_seed_peers
