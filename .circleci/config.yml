version: 2.1

references:
  container_config: &container_config
    docker:
      - image: aeternity/infrastructure:master
    working_directory: /infrastructure
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure

  machine_config: &machine_config
    machine:
      docker_layer_caching: true
    working_directory: /home/circleci/infrastructure
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure
      VAULT_VERSION: 0.11.2

  install_vault: &install_vault
    run:
      name: Install vault
      command: |
        curl -sSO https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
        sudo unzip vault_${VAULT_VERSION}_linux_amd64.zip -d /bin
        rm -f vault_${VAULT_VERSION}_linux_amd64.zip

  pull_current_image: &pull_current_image
    run:
      name: Pull current branch Docker image
      command: |
        docker pull ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?}

  setup_terraform: &setup_terraform
    run:
      name: Setup Terraform
      command: make setup-terraform

  check_terraform_changes: &check_terraform_changes
    run:
      name: Fail on Terraform changes
      command: make check-terraform-changes

  check_seed_peers: &check_seed_peers
    run:
      name: Check seed peers
      command: make check-seed-peers-all

  fail_notification: &fail_notification
    run:
      name: Send failure notification
      environment:
        NOTIFY_BRANCH: master
        HOOK_TEMPLATE: |
          {
            "text": "CircleCI job **%s** failed on branch **%s** by @%s",
            "attachments": [
              {
                "title": "Build Link",
                "title_link": "%s",
                "color": "#FAD6D6"
              }
            ]
          }
      command: |
        if [ -n "$CIRCLE_BRANCH" -a "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
          HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
          curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_DEVOPS_URL:?} --data "${HOOK_DATA:?}"
        fi
      when: on_fail

  setup_secrets: &setup_secrets
    run:
      name: Setup Environment
      command: echo "source import-secrets.sh" >> $BASH_ENV

commands:
  integration_tests:
    description: "Integration Tests"
    steps:
      - run:
          name: Integration Tests
          command: |
            make integration-tests TF_VAR_envid="tf_test_${CIRCLE_JOB}_${CIRCLE_SHA1}"
      - run:
          name: Integration env cleanup
          command: |
            make integration-tests-cleanup TF_VAR_envid="tf_test_${CIRCLE_JOB}_${CIRCLE_SHA1}"
          when: on_fail

jobs:
  build_check:
    docker:
      - image: aeternity/infrastructure:master
      - image: rastasheep/ubuntu-sshd:16.04
    working_directory: /src
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure
      ANSIBLE_CALLBACK_WHITELIST: profile_tasks
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: true
      - run:
          # Used in .circleci/docker-run.sh
          name: Build docker branch image
          command: |
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?} .
      - run:
          name: Configuration lint
          # Secrets are auto-imported by the docker entry-point
          command: |
            .circleci/docker-run.sh make lint
      - run:
          name: Unit Tests
          command: |
            .circleci/docker-run.sh make unit-tests
      - run:
          name: Setup ansible environment
          command: |
            apk add sshpass
            pip install -r requirements.txt
            ansible-galaxy install -r ansible/requirements.yml
      - run:
          name: Test ansible/setup.yml
          command: |
            .circleci/test-ansible-playbook.sh ansible/setup.yml
      - run:
          name: Test ansible/monitoring.yml
          command: |
            .circleci/test-ansible-playbook.sh ansible/monitoring.yml \
              -e datadog_api_key=test \
              -e datadog_enabled=yes \
              -e env=test
      - run:
          name: Test ansible/deploy.yml
          command: |
            .circleci/test-ansible-playbook.sh ansible/deploy.yml \
              -e env=test \
              -e datadog_api_key= \
              -e datadog_app_key=
      - run:
          name: Push (branch) Docker image to DockerHub
          command: |
            source import-secrets.sh
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?}

  setup_terraform:
    <<: *container_config
    steps:
      - *setup_secrets
      - *setup_terraform
      - *fail_notification

  check_terraform_changes:
    <<: *container_config
    working_directory: /src
    steps:
      - checkout
      - *setup_secrets
      - run:
          name: Fail on Terraform changes
          command: |
            make check-terraform-changes

  docker_push_latest:
    <<: *machine_config
    steps:
      - checkout
      - *install_vault
      - *setup_secrets
      - *pull_current_image
      - run:
          name: Tag and push Docker "latest" image to DockerHub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?} ${DOCKERHUB_REPO:?}:latest
            docker push ${DOCKERHUB_REPO:?}:latest
      - *fail_notification

  docker_push_tag:
    <<: *machine_config
    steps:
      - checkout
      - *install_vault
      - *setup_secrets
      - run:
          name: Tag and push Docker image to DockerHub on Git tags
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?} .
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}
      - *fail_notification

  check_seed_peers:
    <<: *container_config
    steps:
      - *setup_secrets
      - *check_seed_peers
      - *fail_notification

  # Checks the compatibility of latest package build and master bootstrap
  integration_tests:
    <<: *container_config
    working_directory: /src
    steps:
      - checkout
      - *setup_secrets
      - integration_tests
      - *fail_notification

  # Checks the compatibility of latest package release and stable bootstrap
  stable_integration_tests:
      <<: *container_config
      working_directory: /src
      steps:
        - checkout
        - *setup_secrets
        - run:
            name: Setup integration tests parameters
            command: |
              echo "export TF_VAR_bootstrap_version=stable" >> $BASH_ENV
              echo "export TF_VAR_package=https://releases.ops.aeternity.com/aeternity-latest-ubuntu-x86_64.tar.gz" >> $BASH_ENV
        - integration_tests
        - *fail_notification

  chain_snapshot_uat:
    <<: *container_config
    steps:
      - *setup_secrets
      - run:
          name: Snapshot of environment blockchain
          no_output_timeout: 2h
          environment:
            - BACKUP_ENV: uat
            - BACKUP_DIR: /tmp
            - BACKUP_DB_VERSION: 1
          command: |
            export BACKUP_SUFFIX=${BACKUP_ENV:?}_db_backup_$(date +%s)
            make mnesia_snapshot

  chain_snapshot_main:
    <<: *container_config
    steps:
      - *setup_secrets
      - run:
          name: Snapshot of environment blockchain
          no_output_timeout: 2h
          environment:
            - BACKUP_ENV: main
            - BACKUP_DIR: /tmp
            - BACKUP_DB_VERSION: 1
          command: |
            export BACKUP_SUFFIX=${BACKUP_ENV:?}_db_backup_$(date +%s)
            make mnesia_snapshot

workflows:
  check_deploy:
    jobs:
      - build_check:
          requires: []

      - stable_integration_tests:
          requires:
            - build_check
          filters:
            branches:
              only: stable

      - integration_tests:
          requires:
            - build_check
          filters:
            branches:
              only:
                - master
                - stable

      - check_terraform_changes:
          requires:
            - build_check # because of the TF state locks
          filters:
            branches:
              ignore:
                - master
                - stable

      - setup_terraform:
          requires:
            - integration_tests
          filters:
            branches:
              only: master

      - check_seed_peers:
          requires:
            - setup_terraform
          filters:
            branches:
              only: master

      - docker_push_latest:
          requires:
            - integration_tests
          filters:
            branches:
              only: master

      - docker_push_tag:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

  chain_snapshot:
    triggers:
      - schedule:
          # run weekly at midnight UTC on Sunday.
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - chain_snapshot_uat
      - chain_snapshot_main

  daily_check_deploy:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - integration_tests:
          requires: []

      # - setup_terraform:
      #     requires:
      #       - integration_tests

  hourly_seeds_check:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - check_seed_peers
