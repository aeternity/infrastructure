version: 2.1

executors:
  ubuntu-1804:
    docker:
      - image: aeternity/infrastructure:master
      - image: rastasheep/ubuntu-sshd:18.04

references:
  container_config: &container_config
    docker:
      - image: aeternity/infrastructure:master
    working_directory: /infrastructure
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure

  machine_config: &machine_config
    machine:
      docker_layer_caching: true
    working_directory: /home/circleci/infrastructure
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure
      VAULT_VERSION: 0.11.2

  install_vault: &install_vault
    run:
      name: Install vault
      command: |
        curl -sSO https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
        sudo unzip vault_${VAULT_VERSION}_linux_amd64.zip -d /bin
        rm -f vault_${VAULT_VERSION}_linux_amd64.zip

  pull_current_image: &pull_current_image
    run:
      name: Pull current branch Docker image
      command: |
        docker pull ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH///\//_}

commands:
  setup_secrets:
    steps:
      - run:
          name: Setup Secrets
          command: make secrets

  docker_login:
    steps:
      - setup_secrets
      - run:
          name: Login to Docker Hub
          command: |
            docker login -u $(</tmp/secrets/DOCKER_USER) -p $(< /tmp/secrets/DOCKER_PASS)

  integration_tests:
    description: "Integration Tests"
    steps:
      - run:
          name: Integration Tests
          command: |
            make integration-tests TF_VAR_envid="tf_test_${CIRCLE_JOB}_${CIRCLE_SHA1}"
      - run:
          name: Integration env cleanup
          command: |
            make integration-tests-cleanup TF_VAR_envid="tf_test_${CIRCLE_JOB}_${CIRCLE_SHA1}"
          when: on_fail

  fail_notification:
    description: Sends notification to RocketChat devops alert group on failure (master only)
    steps:
      - setup_secrets
      - run:
          name: Send failure notification
          environment:
            NOTIFY_BRANCH: master
          command: |
            export ROCKET_HOOK_URL="$(</tmp/secrets/ROCKET_HOOK_DEVOPS_URL)"
            ./scripts/circleci/rocket_fail_notification.sh
          when: on_fail

  build_check:
    steps:
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: true
      - run:
          # Used in .circleci/docker-run.sh
          name: Build docker branch image
          command: |
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH///\//_} .
      - run:
          name: Configuration lint
          # Secrets are auto-imported by the docker entry-point
          command: |
            .circleci/docker-run.sh make lint
      - run:
          name: Setup ansible environment
          command: |
            apk add sshpass
            pip3 install -r requirements.txt
            ansible-galaxy install -r ansible/requirements.yml
      - run:
          name: Dump node configuration
          command: |
            make vault-config-test
      - run:
          name: Test ansible/setup.yml
          command: |
            .circleci/test-ansible-playbook.sh ansible/setup.yml \
              -e "@/tmp/config/test.yml" \
              -e env=test
      - run:
          name: Test ansible/monitoring.yml
          command: |
            .circleci/test-ansible-playbook.sh ansible/monitoring.yml \
              -e "@/tmp/config/test.yml" \
              -e datadog_api_key=test \
              -e datadog_enabled=yes \
              -e env=test
      - run:
          name: Test ansible/deploy.yml
          command: |
            .circleci/test-ansible-playbook.sh ansible/deploy.yml \
              -e "@/tmp/config/test.yml" \
              -e env=test \
              -e datadog_api_key= \
              -e datadog_app_key= \
              -e project_root=/root/node \
              -e packages_path=/tmp
      - docker_login
      - run:
          name: Push (branch) Docker image to DockerHub
          command: |
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH///\//_}


jobs:
  build_check_ubuntu_1804:
    executor: ubuntu-1804
    working_directory: /src
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure
      ANSIBLE_CALLBACK_WHITELIST: profile_tasks
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - build_check

  docker_push_latest:
    <<: *machine_config
    steps:
      - checkout
      - *install_vault
      - *pull_current_image
      - docker_login
      - run:
          name: Tag and push Docker "latest" image to DockerHub
          command: |
            docker tag ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH///\//_} ${DOCKERHUB_REPO:?}:latest
            docker push ${DOCKERHUB_REPO:?}:latest
      - fail_notification

  docker_push_tag:
    <<: *machine_config
    steps:
      - checkout
      - *install_vault
      - docker_login
      - run:
          name: Tag and push Docker image to DockerHub on Git tags
          command: |
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?} -t ${DOCKERHUB_REPO:?}:stable .
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}
            docker push ${DOCKERHUB_REPO:?}:stable
      - fail_notification

  # Checks the compatibility of latest package build and master bootstrap
  branch_integration_tests:
    <<: *container_config
    working_directory: /src
    steps:
      - checkout
      - run:
          name: Setup integration tests parameters
          command: |
            echo "export TF_VAR_bootstrap_version=${CIRCLE_BRANCH:?}" >> $BASH_ENV
      - integration_tests
      - fail_notification

  # Checks the compatibility of latest package release and stable bootstrap
  stable_integration_tests:
      <<: *container_config
      working_directory: /src
      steps:
        - checkout
        - run:
            name: Setup integration tests parameters
            command: |
              echo "export TF_VAR_bootstrap_version=${CIRCLE_TAG:?}" >> $BASH_ENV
              echo "export TF_VAR_package=https://releases.aeternity.io/aeternity-latest-ubuntu-x86_64.tar.gz" >> $BASH_ENV
        - integration_tests
        - fail_notification

workflows:
  check_deploy:
    jobs:
      - build_check_ubuntu_1804:
          context: ae-infra-manage
          requires: []

      - stable_integration_tests:
          context: ae-infra-manage
          requires:
            - build_check_ubuntu_1804
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

      - branch_integration_tests:
          context: ae-infra-manage
          requires: []

      - docker_push_latest:
          context: ae-infra-manage
          requires:
            - build_check_ubuntu_1804
            - branch_integration_tests
          filters:
            branches:
              only: master

      - docker_push_tag:
          context: ae-infra-manage
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/
