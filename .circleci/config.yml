version: 2

references:
  container_config: &container_config
    docker:
      - image: aeternity/infrastructure:master
    working_directory: /infrastructure
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure

  machine_config: &machine_config
    machine:
      docker_layer_caching: true
    working_directory: /home/circleci/infrastructure
    environment:
      DOCKERHUB_REPO: aeternity/infrastructure
      VAULT_VERSION: 0.11.2

  install_vault: &install_vault
    run:
      name: Install vault
      command: |
        curl -sSO https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
        sudo unzip vault_${VAULT_VERSION}_linux_amd64.zip -d /bin
        rm -f vault_${VAULT_VERSION}_linux_amd64.zip

  pull_current_image: &pull_current_image
    run:
      name: Pull current branch Docker image
      command: |
        docker pull ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?}

  setup_terraform: &setup_terraform
    run:
      name: Setup Terraform
      command: make setup-terraform

  check_seed_peers: &check_seed_peers
    run:
      name: Check seed peers
      command: make check-seed-peers

  fail_notification: &fail_notification
    run:
      name: Send failure notification
      environment:
        NOTIFY_BRANCH: master
        HOOK_TEMPLATE: |
          {
            "text": "CircleCI job **%s** failed on branch **%s** by @%s",
            "attachments": [
              {
                "title": "Build Link",
                "title_link": "%s",
                "color": "#FAD6D6"
              }
            ]
          }
      command: |
        if [ -n "$CIRCLE_BRANCH" -a "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
          HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
          curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL:?} --data "${HOOK_DATA:?}"
        fi
      when: on_fail

  setup_secrets: &setup_secrets
    run:
      name: Setup Environment
      command: echo "source import-secrets.sh" >> $BASH_ENV

jobs:
  build_check:
    <<: *machine_config
    steps:
      - checkout
      - *install_vault
      - *setup_secrets
      - run:
          name: Build and push Docker image to DockerHub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?} .
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?}
      - run:
          name: Configuration lint
          command: .circleci/docker-run.sh make lint
      # - run:
      #     name: Prepare Ansible test environment
      #     command: |
      #       # Cleanup ansible environment on "remote" host. Order is important.
      #       sudo apt-get remove python-urllib3 python-setuptools
      #       sudo apt-get update && sudo apt-get install -y python-dev python-pip python-virtualenv
      #       sudo /usr/bin/pip2 install -U setuptools
      #       # Allow ansible runs from "controller" host
      #       pip install -r requirements.txt
      #       ansible-galaxy install -r ansible/requirements.yml
      # - run:
      #     name: Test ansible setup playbook
      #     environment:
      #       - ANSIBLE_CALLBACK_WHITELIST: profile_tasks
      #     command: |
      #       .circleci/test-ansible-playbook.sh ansible/setup.yml
      # - run:
      #     name: Test ansible monitoring playbook
      #     environment:
      #       - ANSIBLE_CALLBACK_WHITELIST: profile_tasks
      #     command: |
      #       .circleci/test-ansible-playbook.sh ansible/monitoring.yml \
      #         -e datadog_api_key=test
      # - run:
      #     name: Test ansible deploy playbook
      #     environment:
      #       - ANSIBLE_CALLBACK_WHITELIST: profile_tasks
      #     command: |
      #       .circleci/test-ansible-playbook.sh ansible/deploy.yml \
      #         -e env=test \
      #         -e datadog_api_key= \
      #         -e datadog_app_key=
      - *fail_notification

  setup_terraform:
    <<: *container_config
    steps:
      - *setup_secrets
      - *setup_terraform
      - *check_seed_peers
      - *fail_notification

  docker_push_latest:
    <<: *machine_config
    steps:
      - checkout
      - *install_vault
      - *setup_secrets
      - *pull_current_image
      - run:
          name: Tag and push Docker "latest" image to DockerHub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker tag ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH:?} ${DOCKERHUB_REPO:?}:latest
            docker push ${DOCKERHUB_REPO:?}:latest
      - *fail_notification

  docker_push_tag:
    <<: *machine_config
    steps:
      - checkout
      - *install_vault
      - *setup_secrets
      - run:
          name: Tag and push Docker image to DockerHub on Git tags
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?} .
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}
      - *fail_notification

  check_seed_peers:
    <<: *container_config
    steps:
      - *setup_secrets
      - *check_seed_peers
      - *fail_notification

workflows:
  version: 2
  check_deploy:
    jobs:
      - build_check:
          requires: []

      - setup_terraform:
          requires:
            - build_check
          filters:
            branches:
              only: master

      - docker_push_latest:
          requires:
            - build_check
          filters:
            branches:
              only: master

      - docker_push_tag:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

  daily_deploy:
    triggers:
      - schedule:
          cron: "0 12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - setup_terraform

  hourly_seeds_check:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - check_seed_peers
