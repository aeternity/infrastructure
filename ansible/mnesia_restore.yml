---
# Playbook used to download (archived) Mnesia backup from last host in the playbook hosts
#
# By default the archive destination is overwritten if already exists,
# if archive overwrite is not intended the caller is responsible for setting correct (e.g. unique) "backup_suffix"
#
# Example steps to restore a mnesia backup:
# 1. Stop the node
# 2. Delete existing mnesia database if any
# 3. Disable mining autostart and empty the peers list in the config
# 4. Start the node
# 5. Restore the backup with "mnesia:restore("/tmp/mnesia.bak", [])."
# 6. Enable mining autostart and restore the peers list in the config
# 7. Start the node

- name: Backup, archive and download Mnesia database
  hosts: "{{ ansible_play_hosts | last }}"
  remote_user: aeternity

  vars:
    project_root: "{{ ansible_env.HOME }}/node"
    aeternity_bin: "{{ ansible_env.HOME }}/node/bin/aeternity"
    download_dir: /tmp/mnesia_backups
    backup_bucket: aeternity-database-backups
    backup_suffix: backup
    health_check: yes
    format: zip
    backup_archive_filename_latest: "mnesia_{{ env }}_{{ ansible_ssh_host|default(inventory_hostname) }}_{{ backup_suffix }}_latest.{{ format }}"

  tasks:
    - name: Download backup to S3 bucket latest
      aws_s3:
        bucket: "{{ backup_bucket }}"
        object: "{{ backup_archive_filename_latest }}"
        dest: /tmp/{{ backup_archive_filename_latest }}
        mode: get

    - name: Unaarchive backup
      unarchive:
        remote_src: yes
        src: /tmp/{{ backup_archive_filename_latest }}
        dest: /tmp/

    - import_tasks: disable_mining_and_peers.yml

    - meta: flush_handlers

    - name: Wait aeternity node API to boot
      wait_for:
        port: "{{ node_config.http.external.port }}"
        host: "{{ public_ipv4 }}"
        timeout: 300
      when: health_check

      tags: [health-check]

    - name: Restore Mnesia database
      command: "{{ aeternity_bin }} eval '{atomic, _} = mnesia:restore(\"/tmp/backup\", [{default_op, recreate_tables}]).'"

    - import_tasks: restore_mining_and_peers_config.yml

    - name: Remove Mnesia backups
      file:
        path:  "{{ item }}"
        state: absent
      loop:
        - /tmp/backup
        - /tmp/{{ backup_archive_filename_latest }}

  handlers:
    - name: Check aeternity binary
      stat:
        path: "{{ project_root }}/bin/aeternity"
      register: ae_node
      tags: [daemon]
      listen:
        - "stop aeternity daemon"
        - "restart aeternity daemon"

    - name: Ping aeternity node
      command: "{{ project_root }}/bin/aeternity ping"
      failed_when: no
      register: ping
      when: ae_node.stat.exists == True
      tags: [daemon]
      listen:
        - "stop aeternity daemon"
        - "restart aeternity daemon"

    - name: Stop aeternity node
      command: "{{ project_root }}/bin/aeternity stop"
      when: ae_node.stat.exists == True and ping.stdout == "pong"
      tags: [daemon]
      listen:
        - "stop aeternity daemon"
        - "restart aeternity daemon"

    - name: Start aeternity node
      command: "{{ project_root }}/bin/aeternity start"
      tags: [daemon]
      listen:
        - "start aeternity daemon"
        - "restart aeternity daemon"
