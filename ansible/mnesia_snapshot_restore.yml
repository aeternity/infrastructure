---
# Playbook used to download mnesia snapshot for env from S3 and restore it to give node

- name: Backup, archive and download Mnesia database
  hosts: all
  remote_user: aeternity

  vars:
    project_root: "{{ ansible_env.HOME }}/node"
    aeternity_bin: "{{ ansible_env.HOME }}/node/bin/aeternity"
    snapshots_bucket: aeternity-database-backups
    snapshots_dir: "{{ additional_storage_mountpoint|default('/tmp') }}/snapshots"
    snapshot_path: "{{ snapshots_dir }}/{{ restore_snapshot_filename|mandatory }}"
    snapshot_checksum_algo: md5
    snapshot_checksum_path: "{{ snapshot_path }}.{{ snapshot_checksum_algo }}"
    restore_dir: "{{ additional_storage_mountpoint|default(project_root) }}"
    should_restore: true
    force_restore: false
    db_path: data/
    healthcheck_port: 3013

  tasks:
    - name: Check if snapshot was restored in {{ restore_dir }}/
      ansible.builtin.stat:
        path: "{{ restore_dir }}/snapshot_restore"
      register: marker

    - name: Disable restoring (marker exists)
      ansible.builtin.set_fact:
        should_restore: false
      when:
        - not force_restore
        - marker.stat.exists

    - name: Disable restoring (empty filename)
      ansible.builtin.set_fact:
        should_restore: false
      when: restore_snapshot_filename == "empty" or restore_snapshot_filename == ""

    - name: Ensure Mnesia snapshots dir exists ({{ snapshots_dir }})
      ansible.builtin.file:
        path: "{{ snapshots_dir }}"
        state: directory
      when: should_restore

    - name: Download Mnesia snapshot {{ restore_snapshot_filename }}
      amazon.aws.s3_object:
        bucket: "{{ snapshots_bucket }}"
        object: "{{ restore_snapshot_filename }}"
        dest: "{{ snapshot_path }}"
        mode: get
      when: should_restore

    - name: Stat {{ snapshot_path }}
      ansible.builtin.stat:
        path: "{{ snapshot_path }}"
        checksum_algorithm: "{{ snapshot_checksum_algo }}"
      register: snapshot_file
      when: should_restore

    - name: Download Mnesia snapshot checksum
      amazon.aws.s3_object:
        bucket: "{{ snapshots_bucket }}"
        object: "{{ restore_snapshot_filename }}.{{ snapshot_checksum_algo }}"
        dest: "{{ snapshot_checksum_path }}"
        mode: get
      register: checksum_file
      when: should_restore
      ignore_errors: true

    - name: Read checksum file
      ansible.builtin.command: "cat {{ snapshot_checksum_path }}"
      register: checksum
      when: should_restore

    - name: Check if snapshot is corrupted
      ansible.builtin.fail:
        msg: Stop restoring (corrupted snapshot)
      when:
        - should_restore
        - checksum_file.failed == false
        - snapshot_file.stat.checksum != checksum.stdout

    - name: Stop node
      ansible.builtin.command: "/bin/true"
      changed_when: true
      notify: "stop aeternity daemon"
      when: should_restore

    - name: Flush handlers
      ansible.builtin.meta: flush_handlers

    - name: Delete old database
      ansible.builtin.file:
        path: "{{ db_path }}"
        state: absent
      when: should_restore

    - name: Make sure database dir exists
      ansible.builtin.file:
        path: "{{ db_path }}"
        state: directory
      when: should_restore

    - name: Restore Mnesia database to {{ db_path }}/
      ansible.builtin.command:
        cmd: tar -I zstd -x -f {{ snapshot_path }} -C {{ db_path }}/
        creates: "{{ db_path }}/mnesia"
      notify: "start aeternity daemon"
      when: should_restore
      tags:
        - skip_ansible_lint

    - name: Create restore marker
      ansible.builtin.file:
        path: "{{ restore_dir }}/snapshot_restore"
        state: touch
      when: should_restore

    - name: Delete local Mnesia snapshots ({{ snapshots_dir }})
      ansible.builtin.file:
        path: "{{ snapshots_dir }}"
        state: absent
      when: should_restore

  handlers:
    - name: Import handlers
      ansible.builtin.import_tasks: tasks/handlers.yml
