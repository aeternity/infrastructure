---
# Playbook used create mnesia snapshot and upload it to S3

- name: Backup, archive and download Mnesia database
  hosts: "{{ ansible_play_hosts | last }}"
  remote_user: aeternity

  vars:
    project_root: "{{ ansible_env.HOME }}/node"
    aeternity_bin: "{{ ansible_env.HOME }}/node/bin/aeternity"
    snapshots_bucket: aeternity-database-backups
    snapshots_dir: "{{ additional_storage_mountpoint | default('/tmp') }}/snapshots"
    snapshot_suffix: "{{ ansible_date_time.iso8601_basic_short }}"
    snapshot_kind: full
    snapshot_filename: "{{ env }}_v{{ db_version }}_{{ snapshot_kind }}_{{ snapshot_suffix }}.tar.zst"
    snapshot_filename_latest: "{{ env }}_v{{ db_version }}_{{ snapshot_kind }}_latest.tar.zst"
    snapshot_path: "{{ snapshots_dir | default('/tmp/snapshots') }}/{{ snapshot_filename }}"
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    security_token: "{{ lookup('env','AWS_SESSION_TOKEN') }}"
    db_path: data/
    healthcheck_port: 3013

  tasks:
    - name: Test
      block:
        - name: Get node status
          ansible.builtin.uri:
            url: "http://localhost:{{ healthcheck_port }}/v3/status"
          register: status
          failed_when: status.json.syncing == true

        - name: Stop node
          ansible.builtin.command: "/bin/true"
          changed_when: true
          notify: "stop aeternity daemon"
          tags: [archive]

        - name: Flush handlers
          ansible.builtin.meta: flush_handlers
          tags: [archive]

        - name: Ensure Mnesia snapshots dir exists ({{ snapshots_dir }})
          ansible.builtin.file:
            path: "{{ snapshots_dir }}"
            state: directory
          tags: [archive]

        - name: Start archive
          tags: [archive]
          block:
            - name: Archive Mnesia Directory ({{ project_root ~ '/' ~ db_path }})
              ansible.builtin.command:
                cmd: tar -c -I zstd -f {{ snapshot_path }} -C {{ project_root }}/{{ db_path }} .
                creates: "{{ snapshot_path }}"
              when: additional_storage is not defined or not additional_storage

            - name: Archive Mnesia Directory ({{ db_path }})
              ansible.builtin.command:
                cmd: tar -c -I zstd -f {{ snapshot_path }} -C {{ db_path }} .
                creates: "{{ snapshot_path }}"
              when:
                - additional_storage is defined
                - additional_storage
          rescue:
            - name: Cleanup on fail
              ansible.builtin.command: /bin/true
              changed_when: true
              notify: "clean snapshot"
            - name: Flush handlers
              ansible.builtin.meta: flush_handlers

        - name: Start node
          ansible.builtin.command: /bin/true
          changed_when: true
          notify: "start aeternity daemon"
          tags: [archive]

        - name: Flush handlers
          ansible.builtin.meta: flush_handlers
          tags: [archive]

        - name: Stat {{ snapshot_path }}
          ansible.builtin.stat:
            path: "{{ snapshot_path }}"
          register: snapshot_file
          tags: [upload]

        - name: Upload snapshot to S3 bucket ({{ snapshots_bucket ~ '/' ~ snapshot_filename }})
          amazon.aws.s3_object:
            bucket: "{{ snapshots_bucket }}"
            object: "{{ snapshot_filename }}"
            src: "{{ snapshot_path }}"
            mode: put
            permission: "public-read"
            aws_access_key: "{{ aws_access_key }}"
            aws_secret_key: "{{ aws_secret_key }}"
            security_token: "{{ security_token }}"
          when:
            - snapshot_file.stat.readable is defined
            - snapshot_file.stat.readable
          tags: [upload]

        - name: Upload backup to S3 bucket latest
          amazon.aws.s3_object:
            bucket: "{{ snapshots_bucket }}"
            object: "{{ snapshot_filename_latest }}"
            src: "{{ snapshot_path }}"
            mode: put
            permission: "public-read"
            aws_access_key: "{{ aws_access_key }}"
            aws_secret_key: "{{ aws_secret_key }}"
            security_token: "{{ security_token }}"
          when:
            - snapshot_file.stat.readable is defined
            - snapshot_file.stat.readable
          tags: [latest]

        - name: Cleanup
          ansible.builtin.command: /bin/true
          changed_when: true
          when:
            - snapshot_file.stat.readable is defined
            - snapshot_file.stat.readable
          notify: "clean snapshot"
          tags: [clean]

      rescue:
        - name: Fail the playbook
          ansible.builtin.fail:
            msg: "Failed snapshot"
          when: true

  handlers:
    - name: Import handlers
      ansible.builtin.import_tasks: tasks/handlers.yml
    - name: Delete local Mnesia snapshots ({{ snapshots_dir }})
      ansible.builtin.file:
        path: "{{ snapshots_dir }}"
        state: absent
      listen: "clean snapshot"
