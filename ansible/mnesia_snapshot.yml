---
# Playbook used create mnesia snapshot and upload it to S3

- name: Backup, archive and download Mnesia database
  hosts: "{{ ansible_play_hosts | last }}"
  remote_user: aeternity

  vars:
    snapshot_suffix: snapshot
    snapshot_filename: "mnesia_{{ env }}_v-{{ db_version }}_{{ ansible_ssh_host|default(inventory_hostname) }}_{{ snapshot_suffix }}.tgz"
    snapshot_path: "{{ snapshots_dir|default('/tmp/snapshots') }}/{{ snapshot_filename }}"
    snapshot_checksum_path: "{{ snapshot_path }}.md5"
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    security_token: "{{ lookup('env','AWS_SESSION_TOKEN') }}"

  tasks:
    - name: Include configuration variables
      include_vars: vars/snapshot.yml
      tags: [always]

    - name: Get node status
      uri:
        url: "http://localhost:{{ node_config.http.external.port | default('3013') }}/v2/status"
      register: status
      failed_when: status.json.syncing == true

    - name: Stop node
      command: "/bin/true"
      changed_when: true
      notify: "stop aeternity daemon"
      tags: [archive]

    - meta: flush_handlers
      tags: [archive]

    - name: Ensure Mnesia snapshots dir exists ({{ snapshots_dir }})
      file:
        path: "{{ snapshots_dir }}"
        state: directory
      tags: [archive]

    - name: Start archive
      block:
        - name: Archive Mnesia Directory ({{ project_root }}/{{ node_config.chain.db_path }})
          archive:
            format: gz
            path: "{{ project_root }}/{{ node_config.chain.db_path }}"
            dest: "{{ snapshot_path }}"
          when: additional_storage is not defined or not additional_storage

        - name: Archive Mnesia Directory ({{ node_config.chain.db_path }})
          archive:
            format: gz
            path: "{{ node_config.chain.db_path }}"
            dest: "{{ snapshot_path }}"
          when:
            - additional_storage is defined
            - additional_storage
      rescue:
        - name: Cleanup on fail
          command: /bin/true
          changed_when: true
          notify: "clean snapshot"
        - meta: flush_handlers
      tags: [archive]

    - name: Start node
      command: /bin/true
      changed_when: true
      notify: "start aeternity daemon"
      tags: [archive]

    - meta: flush_handlers
      tags: [archive]

    - name: Stat {{ snapshot_path }}
      stat:
        path: "{{ snapshot_path }}"
        checksum_algorithm: md5
      register: snapshot_file
      tags: [upload]

    - name: Upload snapshot to S3 bucket ({{ snapshots_bucket }}/{{ snapshot_filename }})
      aws_s3:
        bucket: "{{ snapshots_bucket }}"
        object: "{{ snapshot_filename }}"
        src: "{{ snapshot_path }}"
        mode: put
        permission: "public-read"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      when:
        - snapshot_file.stat.readable is defined
        - snapshot_file.stat.readable
      tags: [upload]

    - name: Generate a checksum file ({{ snapshot_checksum_path }})
      copy:
        dest: "{{ snapshot_checksum_path }}"
        content: "{{ snapshot_file.stat.checksum }}"
      when:
        - snapshot_file.stat.readable is defined
        - snapshot_file.stat.readable
      tags: [upload]

    - name: Upload the checksum file to S3 ({{ snapshots_bucket }}/{{ snapshot_filename }}.md5)
      aws_s3:
        bucket: "{{ snapshots_bucket }}"
        object: "{{ snapshot_filename }}.md5"
        src: "{{ snapshot_checksum_path }}"
        mode: put
        permission: "public-read"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      when:
        - snapshot_file.stat.readable is defined
        - snapshot_file.stat.readable
      tags: [upload]

    - name: Upload backup to S3 bucket latest
      aws_s3:
        bucket: "{{ snapshots_bucket }}"
        object: "{{ snapshots_filename_latest }}"
        src: "{{ snapshot_path }}"
        mode: put
        permission: "public-read"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      when:
        - snapshot_file.stat.readable is defined
        - snapshot_file.stat.readable
      tags: [latest]

    - name: Upload the checksum file to S3 latest
      aws_s3:
        bucket: "{{ snapshots_bucket }}"
        object: "{{ snapshots_filename_latest }}.md5"
        src: "{{ snapshot_checksum_path }}"
        mode: put
        permission: "public-read"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
      when:
        - snapshot_file.stat.readable is defined
        - snapshot_file.stat.readable
      tags: [latest]

    - name: Cleanup
      command: /bin/true
      changed_when: true
      when:
        - snapshot_file.stat.readable is defined
        - snapshot_file.stat.readable
      notify: "clean snapshot"
      tags: [clean]

  handlers:
  - import_tasks: tasks/handlers.yml
  - name: Delete local Mnesia snapshots ({{ snapshots_dir }})
    file:
      path: "{{ snapshots_dir }}"
      state: absent
    listen: "clean snapshot"
