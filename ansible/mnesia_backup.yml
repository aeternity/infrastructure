---
# Playbook used to download (archived) Mnesia backup from last host in the playbook hosts
#
# By default the archive destination is overwritten if already exists,
# if archive overwrite is not intended the caller is responsible for setting correct (e.g. unique) "backup_suffix"
#
# Example steps to restore a mnesia backup:
# 1. Stop the node
# 2. Delete existing mnesia database if any
# 3. Disable mining autostart and empty the peers list in the config
# 4. Start the node
# 5. Restore the backup with "mnesia:restore("/tmp/mnesia.bak", [])."
# 6. Enable mining autostart and restore the peers list in the config
# 7. Start the node

- name: Backup, archive and download Mnesia database
  hosts: "{{ ansible_play_hosts | last }}"
  remote_user: aeternity
  tasks:
    - name: Include configuration variables
      include_vars: backup/config.yml

    - name: Disable mining and peers
      import_tasks: backup/disable_mining_and_peers.yml

    - meta: flush_handlers
    - debug:
        var: health_check
    - debug:
        var: project_root
    - name: Wait aeternity node API to boot
      wait_for:
        port: "{{ node_config.http.external.port }}"
        host: "{{ public_ipv4 }}"
        timeout: 300
      when: health_check

      tags: [health-check]

    - name: Backup Mnesia database
      command: "{{ aeternity_bin }} eval 'ok = mnesia:backup(\"/tmp/backup\").'"
      args:
        creates: "/tmp/backup"
      notify: "stop aeternity daemon"

    - name: Archive Mnesia backup
      archive:
        format: zip
        path: /tmp/backup
        dest: /tmp/{{ backup_archive_filename }}

    - name: Upload backup to S3 bucket
      aws_s3:
        bucket: "{{ backup_bucket }}"
        object: "{{ backup_archive_filename }}"
        src: /tmp/{{ backup_archive_filename }}
        mode: put

    - name: Upload backup to S3 bucket latest
      aws_s3:
        bucket: "{{ backup_bucket }}"
        object: "{{ backup_archive_filename_latest }}"
        src: /tmp/{{ backup_archive_filename }}
        mode: put
        aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        security_token: "{{ lookup('env','AWS_SESSION_TOKEN') }}"

    - name: Remove Mnesia backups
      file:
        path:  "{{ item }}"
        state: absent
      loop:
        - /tmp/backup
        - /tmp/{{ backup_archive_filename }}

    - import_tasks: backup/restore_mining_and_peers_config.yml

  handlers:
  - import_tasks: handlers.yml
