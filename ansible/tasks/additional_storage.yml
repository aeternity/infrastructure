---
- name: Check if running on AWS instance
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 2
  register: aws_uri_check
  failed_when: False
  tags: [always]

- name: Set AWS check fact
  set_fact:
    is_aws: "{{ aws_uri_check.status == 200 }}"
  tags: [always]

- name: "Load a variable files for environment: {{ env }}"
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "vars/aeternity/{{ env }}.yml"
      skip: true

- name: Check that the /dev/xvdh exists
  stat:
    path: /dev/xvda1
  register: xvdh_dev
  when:
    - additional_storage is defined
    - additional_storage
    - additional_storage_mountpoint is defined
    - is_aws

- name: Detect additional storage device name
  set_fact:
    additional_storage_dev: "{{ (xvdh_dev.stat is defined and xvdh_dev.stat.exists) | ternary('/dev/xvdh', '/dev/nvme1n1') }}"
  tags: [always]
  when:
    - xvdh_dev is defined
    - additional_storage is defined
    - additional_storage
    - additional_storage_mountpoint is defined
    - is_aws

- name: "Wait for {{ additional_storage_dev }} to become present"
  wait_for:
    path: "{{ additional_storage_dev }}"
    state: present
  when: additional_storage_dev is defined

- name: Create a xfs filesystem on /dev/nvme1n1
  filesystem:
    fstype: xfs
    dev: "{{ additional_storage_dev }}"
  when: additional_storage_dev is defined

- name: Mount disk {{ additional_storage_mountpoint }}
  mount:
    path: "{{ additional_storage_mountpoint }}"
    src: "{{ additional_storage_dev }}"
    fstype: xfs
    state: mounted
  when: additional_storage_dev is defined

- name: Make sure that node will be able to access storage
  file:
    path: "{{ additional_storage_mountpoint }}"
    owner: "{{ project_user }}"
    group: "{{ project_user }}"
    mode: 0744
  when: additional_storage_dev is defined
