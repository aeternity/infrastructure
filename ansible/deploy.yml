---
# Additional playbook that runs on a group first host only and gather facts from all hosts
# This is required to allow deploying on fraction of group hosts
# For example rolling updates and deploying only to single hosts of a group
#
# For example below command will deploy only to ae-dev2-aeternity-n0 host in tag_env_dev2 group
# ansible-playbook --limit="ae-dev2-aeternity-n0" --extra-vars "hosts_group=tag_env_dev2" deploy.yml

- name: Facts setup
  hosts: all
  remote_user: aeternity
  # Gather fact the usual way when hosts_group is not defined for delegated way
  gather_facts: "{{ (hosts_group is not defined) }}"
  tasks:
    - name: Gather facts from all hosts in {{ hosts_group }} group
      setup:
      run_once: yes
      delegate_to: "{{ item }}"
      delegate_facts: yes
      with_items: "{{ groups[hosts_group] }}"
      # http://docs.ansible.com/ansible/latest/user_guide/playbooks_tags.html#special-tags
      tags: [always]
      when: hosts_group is defined

    - name: Check if running on AWS instance
      uri:
        url: http://169.254.169.254/latest/meta-data
        timeout: 2
      register: aws_uri_check
      failed_when: False
      tags: [always]

    - name: Set AWS check fact
      set_fact:
        is_aws: "{{ aws_uri_check.status == 200 }}"
      tags: [always]

    - name: Gather instance metadata facts
      ec2_metadata_facts:
      tags: [always]
      when: is_aws

- name: Deploy aeternity package
  hosts: all
  remote_user: aeternity
  # Facts are already collected in the previous playbook
  gather_facts: no
  max_fail_percentage: 25

  vars:
    project_root: "{{ ansible_env.HOME }}/node"
    packages_path: "{{ ansible_env.HOME }}"
    genesis_accounts_path: "{{ project_root }}/data/aecore/.genesis/accounts.json"
    local_peer_keys_dir: "files/peer_keys/{{ public_ipv4 }}"
    datadog_api_key: "{{ lookup('hashi_vault', 'secret=secret/datadog/deploy:api_key') }}"
    datadog_app_key: "{{ lookup('hashi_vault', 'secret=secret/datadog/deploy:app_key') }}"
    datadog_api_url: https://api.datadoghq.com/api/v1/downtime?api_key={{ datadog_api_key }}&application_key={{ datadog_app_key }}
    downtime: "0"
    health_check: yes
    node_vars: "{{ ansible_local.aeternity|default(ansible_local.epoch) }}"

    # Label used for datadog tagging and ENV file planting
    env: unknown

  tasks:
    - block:
      - name: Schedule downtime
        run_once: yes
        uri:
          url: "{{ datadog_api_url }}"
          method: POST
          status_code: 200
          timeout: 10
          body_format: json
          body:
            scope: "env:{{ env }}"
            message: "Deploy"
            end: "{{ lookup('pipe', 'date +%s')|int + downtime|int }}"
        when:
          - downtime is defined
          - downtime != "0"

      - name: "Load a variable files for environment: {{ env }}"
        include_vars: "{{ item }}"
        with_first_found:
          - "vars/aeternity/{{ env }}.yml"
          - "vars/aeternity/default.yml"
        tags: [config, node_config, peer_keys, health-check]

      - name: Fail on missing package variable
        fail:
          msg: '"package" variable must be defined'
        when: package is not defined
        tags: [package]

      - name: Delete old downloaded pacakges glob
        find:
          paths: "{{packages_path}}"
          patterns:
            - .*aeternity-.*ubuntu.*.tar.gz
            - .*epoch-.*ubuntu.*.tar.gz
          exclude: "{{ package|basename }}"
          use_regex: yes
        register: old_packages_to_delete

      - name: Delete old packages
        file:
          path: "{{ item.path }}"
          state: absent
        loop: "{{ old_packages_to_delete.files }}"

      - name: Download remote package
        get_url:
          url: "{{ package }}"
          dest: "{{ packages_path }}/{{ package|basename }}"
          checksum: "{{ package_checksum|default(omit) }}"
        when: "'http' in package"
        register: remote_package
        notify: "stop aeternity daemon"
        tags: [package]

      - name: Upload local package
        copy:
          src: "{{ package }}"
          dest: "{{ packages_path }}/{{ package|basename }}"
        when: "'http' not in package"
        register: local_package
        notify: "stop aeternity daemon"
        tags: [package]

      - name: "Make sure {{ project_root }} exists"
        file:
            path: "{{ project_root }}"
            state: directory
            # allow group read for integration purposes  (e.g. logs)
            mode: 0750

      - meta: flush_handlers

      - name: Create erlang cookie file
        copy:
          dest: "{{ ansible_env.HOME }}/.erlang.cookie"
          content: "aeternity_cookie"
          mode: 0400
        tags: [config, erlang_cookie]

      - name: Extract aeternity package into {{ project_root }}
        unarchive:
          remote_src: true
          keep_newer: true
          src: "{{ packages_path }}/{{ package|basename }}"
          dest: "{{ project_root }}"
        when: remote_package.changed or local_package.changed
        notify: "start aeternity daemon"
        tags: [package]

      - name: Plant ENV file
        copy:
          content: "{{ env }}\n"
          dest: "{{ project_root }}/ENV"
        notify: "restart aeternity daemon"
        tags: [package]

      - name: "Make sure chain path ( {{ node_config.chain.db_path }} ) exists"
        file:
          path: "{{ project_root }}/{{ node_config.chain.db_path }}"
          state: directory
        tags: [config]

      - name: "Make sure keys dir ( {{ node_config['keys']['dir'] }} ) exists"
        file:
          path: "{{ project_root }}/{{ node_config['keys']['dir'] }}"
          state: directory
          mode: 0700
        tags: [config, peer_keys]

      - name: "Copy node keys to {{ project_root }}/{{ node_config['keys']['dir'] }}"
        copy:
          src: "{{ item }}"
          dest: "{{ project_root }}/{{ node_config['keys']['dir'] }}"
          mode: 0600
        with_items: "{{ keypair }}"
        when: keypair is defined
        notify: "restart aeternity daemon"
        tags: [config]

      - name: Update node configuration
        template:
          src: templates/aeternity.yaml
          dest: "{{ project_root }}/epoch.yaml"
          mode: '0600'
        notify: "restart aeternity daemon"
        tags: [config, node_config]

      - name: Update accounts configuration
        copy:
          content: "{{ genesis_accounts | to_nice_json }}"
          dest: "{{ genesis_accounts_path }}"
        when: genesis_accounts is defined
        tags: [config]

      - name: "Copy node public peer key to {{ project_root }}/{{ node_config['keys']['dir'] }}/peer_key.pub"
        copy:
          content: "{{ lookup('hashi_vault', 'secret=secret/aenode/peer_keys/{{ public_ipv4 }}/public:base64')|b64decode }}"
          dest: "{{ project_root }}/{{ node_config['keys']['dir'] }}/peer_key.pub"
          mode: 0600
        when: public_ipv4 in seed_peers
        notify: "restart aeternity daemon"
        tags: [config, peer_keys]

      - name: "Copy node private peer key to {{ project_root }}/{{ node_config['keys']['dir'] }}/peer_key"
        copy:
          content: "{{ lookup('hashi_vault', 'secret=secret/aenode/peer_keys/{{ public_ipv4 }}/private:base64')|b64decode }}"
          dest: "{{ project_root }}/{{ node_config['keys']['dir'] }}/peer_key"
          mode: 0600
        when: public_ipv4 in seed_peers
        notify: "restart aeternity daemon"
        tags: [config, peer_keys]

      - meta: flush_handlers

      - name: Wait aeternity node API to boot
        wait_for:
          port: "{{ node_config.http.external.port }}"
          host: "{{ public_ipv4 }}"
          timeout: 300
        when: health_check
        connection: local
        tags: [health-check]

      - name: API health check
        uri:
          url: "{{ api_base_uri }}/blocks/top"
          timeout: 30
        when: health_check
        connection: local
        tags: [health-check]

      - name: Refresh aeternity facts
        setup:
        tags: [datadog-event]

      - name: Send Datadog event
        datadog_event:
          host: "{{ public_ipv4 }}"
          alert_type: success
          title: Deploy
          text: |
            %%%
            Revision: [{{ node_vars.revision }}](https://github.com/aeternity/aeternity/commit/{{ node_vars.revision }})
            Package: {{ package|default('unknown') }}
            %%%
          api_key: "{{ datadog_api_key }}"
          app_key: "{{ datadog_app_key }}"
          tags:
            - "env:{{ env }}"
            - "version:{{ node_vars.version }}"
        when:
          - datadog_api_key != ""
          - datadog_app_key != ""
        connection: local
        tags: [datadog-event]
      rescue:
        - name: Send Datadog event
          datadog_event:
            host: "{{ public_ipv4 }}"
            alert_type: error
            title: Deploy
            text: "Package: {{ package|default('unknown') }}"
            api_key: "{{ datadog_api_key }}"
            app_key: "{{ datadog_app_key }}"
            tags:
              - "env:{{ env }}"
          when:
            - datadog_api_key != ""
            - datadog_app_key != ""
          connection: local
          tags: [datadog-event]
        - name: Fail the playbook
          fail:
            msg: "Failed deploy"
          when: true

  handlers:
    - name: Check aeternity binary
      stat:
        path: "{{ project_root }}/bin/aeternity"
      register: ae_node
      tags: [daemon]
      listen:
        - "stop aeternity daemon"
        - "restart aeternity daemon"

    - name: Ping aeternity node
      command: "{{ project_root }}/bin/aeternity ping"
      failed_when: no
      register: ping
      when: ae_node.stat.exists == True
      tags: [daemon]
      listen:
        - "stop aeternity daemon"
        - "restart aeternity daemon"

    - name: Stop aeternity node
      command: "{{ project_root }}/bin/aeternity stop"
      when: ae_node.stat.exists == True and ping.stdout == "pong"
      tags: [daemon]
      listen:
        - "stop aeternity daemon"
        - "restart aeternity daemon"

    - name: Start aeternity node
      command: "{{ project_root }}/bin/aeternity start"
      tags: [daemon]
      listen:
        - "start aeternity daemon"
        - "restart aeternity daemon"
