---
# Additional playbook that runs on a group first host only and gather facts from all hosts
# This is required to allow deploying on fraction of group hosts
# For example rolling updates and deploying only to single hosts of a group
#
# For example below command will deploy only to ae-dev2-epoch-n0 host in tag_env_dev2 group
# ansible-playbook --limit="ae-dev2-epoch-n0" --extra-vars "hosts_group=tag_env_dev2" deploy.yml

- name: Facts setup
  hosts: all
  remote_user: epoch
  # Gather fact the usual way when hosts_group is not defined for delegated way
  gather_facts: "{{ (hosts_group is not defined) }}"
  tasks:
    - name: Gather facts from all hosts in {{ hosts_group }} group
      setup:
      run_once: yes
      delegate_to: "{{ item }}"
      delegate_facts: yes
      with_items: "{{ groups[hosts_group] }}"
      # http://docs.ansible.com/ansible/latest/user_guide/playbooks_tags.html#special-tags
      tags: [always]
      when: hosts_group is defined
    - name: Gather instance metadata facts
      ec2_metadata_facts:
      tags: [always]
      when: '"amazon" in ansible_bios_version'

- name: Deploy epoch package
  hosts: all
  remote_user: epoch
  # Facts are already collected in the previous playbook
  gather_facts: no
  max_fail_percentage: 25

  vars:
    project_root: "{{ ansible_env.HOME }}/node"
    packages_path: "{{ ansible_env.HOME }}"
    genesis_accounts_path: "{{ project_root }}/data/aecore/.genesis/accounts.json"
    local_peer_keys_dir: "files/peer_keys/{{ public_ipv4 }}"
    datadog_api_key: "{{ vault_datadog_api_key }}"
    datadog_app_key: "{{ vault_datadog_app_key }}"
    datadog_api_url: https://api.datadoghq.com/api/v1/downtime?api_key={{ datadog_api_key }}&application_key={{ datadog_app_key }}
    downtime: "0"

    # Label used for datadog tagging and ENV file planting
    env: unknown

  tasks:
    - block:
      - name: Schedule downtime
        run_once: yes
        uri:
          url: "{{ datadog_api_url }}"
          method: POST
          status_code: 200
          timeout: 10
          body_format: json
          body:
            scope: "env:{{ env }}"
            message: "Deploy"
            end: "{{ lookup('pipe', 'date +%s')|int + downtime|int }}"
        when:
          - downtime is defined
          - downtime != "0"

      - name: "Load a variable files for environment: {{ env }}"
        include_vars: "{{ item }}"
        with_first_found:
          - "vars/epoch/{{ env }}.yml"
          - "vars/epoch/default.yml"
        tags: [config, peer_keys, health-check]

      - name: Fail on missing package variable
        fail:
          msg: '"package" variable must be defined'
        when: package is not defined
        tags: [package]

      - name: Download remote package
        get_url:
          url: "{{ package }}"
          dest: "{{ packages_path }}/{{ package|basename }}"
          checksum: "{{ package_checksum|default(omit) }}"
        when: "'http' in package"
        register: remote_package
        notify: "stop epoch daemon"

      - name: Upload local package
        copy:
          src: "{{ package }}"
          dest: "{{ packages_path }}/{{ package|basename }}"
        when: "'http' not in package"
        register: local_package
        notify: "stop epoch daemon"

      - name: "Make sure {{ project_root }} exists"
        file:
            path: "{{ project_root }}"
            state: directory
            # allow group read for integration purposes  (e.g. logs)
            mode: 0750

      - meta: flush_handlers

      - name: Extract epoch package into {{ project_root }}
        unarchive:
          remote_src: true
          keep_newer: true
          src: "{{ packages_path }}/{{ package|basename }}"
          dest: "{{ project_root }}"
        when: remote_package.changed or local_package.changed
        notify: "start epoch daemon"
        tags: [package]

      - name: Plant ENV file
        copy:
          content: "{{ env }}\n"
          dest: "{{ project_root }}/ENV"
        notify: "restart epoch daemon"
        tags: [package]

      - name: "Make sure chain path ( {{ epoch_config.chain.db_path }} ) exists"
        file:
          path: "{{ project_root }}/{{ epoch_config.chain.db_path }}"
          state: directory
        tags: [config]

      - name: "Make sure keys dir ( {{ epoch_config['keys']['dir'] }} ) exists"
        file:
          path: "{{ project_root }}/{{ epoch_config['keys']['dir'] }}"
          state: directory
          mode: 0700
        tags: [config]

      - name: "Copy node keys to {{ project_root }}/{{ epoch_config['keys']['dir'] }}"
        copy:
          src: "{{ item }}"
          dest: "{{ project_root }}/{{ epoch_config['keys']['dir'] }}"
          mode: 0600
        with_items: "{{ keypair }}"
        when: keypair is defined
        notify: "restart epoch daemon"
        tags: [config]

      - name: Update epoch configuration
        template:
          src: templates/epoch.yaml
          dest: "{{ project_root }}/epoch.yaml"
          mode: '0600'
        notify: "restart epoch daemon"
        tags: [config]

      - name: Update accounts configuration
        copy:
          content: "{{ genesis_accounts | to_nice_json }}"
          dest: "{{ genesis_accounts_path }}"
        when: genesis_accounts is defined
        tags: [config]

      # Workaround to deploy peer keys even with --limits that does not include seed groups
      # Also workarounds an issue with hostname/IP of inventory items, as the keys are bound to IP
      - name: Check if peer keys directory exists
        stat:
          path: "{{ local_peer_keys_dir }}"
        register: stat_peer_dir
        connection: local
        tags: [config, peer_keys]

      - name: "Copy node peer keys to {{ project_root }}/{{ epoch_config['keys']['dir'] }}"
        copy:
          src: "{{ item }}"
          dest: "{{ project_root }}/{{ epoch_config['keys']['dir'] }}"
          mode: 0600
        with_items:
          - "{{ local_peer_keys_dir }}/peer_key"
          - "{{ local_peer_keys_dir }}/peer_key.pub"
        when: stat_peer_dir.stat.exists
        notify: "restart epoch daemon"
        tags: [config, peer_keys]

      - meta: flush_handlers

      - name: Wait epoch node API to boot
        wait_for:
          port: "{{ epoch_config.http.external.port }}"
          host: "{{ public_ipv4 }}"
          timeout: 300
        connection: local
        tags: [health-check]

      - name: API health check
        uri:
          url: "{{ api_base_uri }}/blocks/top"
          timeout: 30
        connection: local
        tags: [health-check]

      - name: Refresh epoch facts
        setup:
        tags: [datadog-event]

      - name: Send Datadog event
        datadog_event:
          host: "{{ public_ipv4 }}"
          alert_type: success
          title: Deploy
          text: |
            %%%
            Revision: [{{ ansible_local.epoch.revision }}](https://github.com/aeternity/epoch/commit/{{ ansible_local.epoch.revision }})
            Package: {{ package }}
            %%%
          api_key: "{{ datadog_api_key }}"
          app_key: "{{ datadog_app_key }}"
          tags:
            - "env:{{ env }}"
            - "version:{{ ansible_local.epoch.version }}"
        connection: local
        tags: [datadog-event]
      rescue:
        - name: Send Datadog event
          datadog_event:
            host: "{{ public_ipv4 }}"
            alert_type: error
            title: Deploy
            text: "Package: {{ package }}"
            api_key: "{{ datadog_api_key }}"
            app_key: "{{ datadog_app_key }}"
            tags:
              - "env:{{ env }}"
          connection: local
          tags: [datadog-event]
        - fail:
            msg: "Failed deploy"
            when: true

  handlers:
    - name: Check epoch binary
      stat:
        path: "{{ project_root }}/bin/epoch"
      register: epoch
      tags: [daemon]
      listen:
        - "stop epoch daemon"
        - "restart epoch daemon"

    - name: Ping epoch
      command: "{{ project_root }}/bin/epoch ping"
      failed_when: no
      register: ping
      when: epoch.stat.exists == True
      tags: [daemon]
      listen:
        - "stop epoch daemon"
        - "restart epoch daemon"

    - name: Stop epoch
      command: "{{ project_root }}/bin/epoch stop"
      when: epoch.stat.exists == True and ping.stdout == "pong"
      tags: [daemon]
      listen:
        - "stop epoch daemon"
        - "restart epoch daemon"

    - name: Start epoch
      command: "{{ project_root }}/bin/epoch start"
      tags: [daemon]
      listen:
        - "start epoch daemon"
        - "restart epoch daemon"
