---
- name: Deploy aeternity package
  hosts: all
  remote_user: aeternity
  serial: "{{ rolling_update | default('100%') }}"
  # Facts are already collected in the previous playbook
  gather_facts: no
  max_fail_percentage: 25

  vars:
    public_ipv4: "{{ ansible_ec2_public_ipv4|default(ansible_ssh_host)|default(ansible_host)|default(inventory_hostname) }}"
    project_root: "/home/aeternity/node"
    packages_path: "/home/aeternity"
    datadog_api_key: "{{ lookup('hashi_vault', 'secret=secret/datadog/deploy:api_key') }}"
    datadog_app_key: "{{ lookup('hashi_vault', 'secret=secret/datadog/deploy:app_key') }}"
    datadog_api_url: https://api.datadoghq.com/api/v1/downtime?api_key={{ datadog_api_key }}&application_key={{ datadog_app_key }}
    downtime: "0"
    health_check: yes

    # Label used for datadog tagging and ENV file planting
    env: unknown

  tasks:
    - name: Check if running on AWS instance
      uri:
        url: http://169.254.169.254/latest/meta-data
        timeout: 2
      register: aws_uri_check
      failed_when: False
      tags: [always]

    - name: Set AWS check fact
      set_fact:
        is_aws: "{{ aws_uri_check.status == 200 }}"
      tags: [always]

    - name: Gather instance metadata facts
      ec2_metadata_facts:
      tags: [always]
      when: is_aws

    - block:
      - name: Schedule downtime
        run_once: yes
        uri:
          url: "{{ datadog_api_url }}"
          method: POST
          status_code: 200
          timeout: 10
          body_format: json
          body:
            scope: "env:{{ env }}"
            message: "Deploy"
            end: "{{ lookup('pipe', 'date +%s')|int + downtime|int }}"
        when:
          - downtime is defined
          - downtime != "0"

      - name: Fail on missing package variable
        fail:
          msg: '"package" variable must be defined'
        when: package is not defined
        tags: [package]

      - name: Delete old downloaded pacakges glob
        find:
          paths: "{{ packages_path }}"
          patterns:
            - .*aeternity-.*ubuntu.*.tar.gz
          exclude: "{{ package|basename }}"
          use_regex: yes
        register: old_packages_to_delete

      - name: Delete old packages
        file:
          path: "{{ item.path }}"
          state: absent
        loop: "{{ old_packages_to_delete.files }}"

      - name: Download remote package
        get_url:
          url: "{{ package }}"
          dest: "{{ packages_path }}/{{ package|basename }}"
          checksum: "{{ package_checksum|default(omit) }}"
          timeout: 3600
        when: "'http' in package"
        register: remote_package
        notify: "stop aeternity daemon"
        tags: [package]

      - name: Upload local package
        copy:
          src: "{{ package }}"
          dest: "{{ packages_path }}/{{ package|basename }}"
          mode: 0644
        when: "'http' not in package"
        register: local_package
        notify: "stop aeternity daemon"
        tags: [package]

      - name: "Make sure 'project_root' exists"
        file:
            path: "{{ project_root }}"
            state: directory
            # allow group read for integration purposes  (e.g. logs)
            mode: 0750

      - name: Flush handlers
        meta: flush_handlers

      - name: Extract aeternity package
        unarchive:
          remote_src: true
          keep_newer: true
          src: "{{ packages_path }}/{{ package|basename }}"
          dest: "{{ project_root }}"
        when: remote_package.changed or local_package.changed
        notify: "start aeternity daemon"
        tags: [package]

      - name: Plant ENV file
        copy:
          content: "{{ env }}\n"
          dest: "{{ project_root }}/ENV"
          mode: 0600
        notify: "restart aeternity daemon"
        tags: [package]

      - name: Fail on missing 'node_config.chain.db_path' variable
        fail:
          msg: 'Chain persistence is enabled, but "node_config.chain.db_path" is not defined'
        when:
          - node_config.chain.persist is defined
          - node_config.chain.persist
          - node_config.chain.db_path is not defined
        tags: [config]

      - name: "Make sure chain path exists"
        file:
          path: "{{ project_root }}/{{ node_config.chain.db_path }}"
          state: directory
          mode: 0700
        when: additional_storage is not defined or not additional_storage
        tags: [config]

      - name: "Make sure chain path ( {{ node_config.chain.db_path }} ) exists"
        file:
          path: "{{ node_config.chain.db_path }}"
          state: directory
          mode: 0700
        when: additional_storage is defined and additional_storage
        tags: [config]

      - name: "Make sure keys dir ( {{ node_config['keys']['dir'] }} ) exists"
        file:
          path: "{{ project_root }}/{{ node_config['keys']['dir'] }}"
          state: directory
          mode: 0700
        tags: [config, peer_keys]

      - name: "Copy node public peer key to {{ node_config['keys']['dir'] }}/peer_key.pub"
        copy:
          content: "{{ lookup('hashi_vault', 'secret=secret/aenode/peer_keys/{{ public_ipv4 }}/public:base64')|b64decode }}"
          dest: "{{ project_root }}/{{ node_config['keys']['dir'] }}/peer_key.pub"
          mode: 0600
        when: seed_peers is defined and public_ipv4 in seed_peers
        notify: "restart aeternity daemon"
        tags: [config, peer_keys]

      - name: "Copy node private peer key to {{ node_config['keys']['dir'] }}/peer_key"
        copy:
          content: "{{ lookup('hashi_vault', 'secret=secret/aenode/peer_keys/{{ public_ipv4 }}/private:base64')|b64decode }}"
          dest: "{{ project_root }}/{{ node_config['keys']['dir'] }}/peer_key"
          mode: 0600
        when: seed_peers is defined and public_ipv4 in seed_peers
        notify: "restart aeternity daemon"
        tags: [config, peer_keys]

      - name: Update node configuration
        copy:
          # node_config has default just because of ansible-lint, otherwise it crashes badly
          content: "{{ node_config | default({}) | to_nice_yaml }}"
          dest: "{{ project_root }}/aeternity.yaml"
          mode: '0600'
        when: node_config is defined
        notify: "restart aeternity daemon"
        tags: [config, node_config]

      - name: Start aeternity node
        command: "{{ project_root }}/bin/aeternity start"
        changed_when: false
        tags: [daemon]

      - name: Flush handlers
        meta: flush_handlers

      - name: Run health checks
        include_tasks: tasks/health_check.yml

      - name: Refresh aeternity facts
        setup:
        tags: [datadog-event]

      - name: Send Datadog event
        datadog_event:
          host: "{{ public_ipv4 }}"
          alert_type: success
          title: Deploy
          text: |
            %%%
            Revision: [{{ ansible_local.aeternity.revision }}](https://github.com/aeternity/aeternity/commit/{{ ansible_local.aeternity.revision }})
            Package: {{ package|default('unknown') }}
            %%%
          api_key: "{{ datadog_api_key }}"
          app_key: "{{ datadog_app_key }}"
          tags:
            - "env:{{ env }}"
            - "version:{{ ansible_local.aeternity.version }}"
        when:
          - datadog_api_key != ""
          - datadog_app_key != ""
        connection: local
        tags: [datadog-event]
      rescue:
        - name: Send Datadog event
          datadog_event:
            host: "{{ public_ipv4 }}"
            alert_type: error
            title: Deploy
            text: |
              %%%
              Package: {{ package|default('unknown') }}
              Task {{ ansible_failed_task.name }} failed with error {{ ansible_failed_result.msg }}
              %%%
            api_key: "{{ datadog_api_key }}"
            app_key: "{{ datadog_app_key }}"
            tags:
              - "env:{{ env }}"
          when:
            - datadog_api_key != ""
            - datadog_app_key != ""
          connection: local
          tags: [datadog-event]
        - name: Fail the playbook
          fail:
            msg: "Failed deploy"
          when: true

  handlers:
  - import_tasks: tasks/handlers.yml
