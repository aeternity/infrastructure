---
- name: Reset aeternity test-net
  hosts: all
  remote_user: aeternity

  vars:
    project_root: "{{ ansible_env.HOME }}/node"
    aeternity_bin: "{{ project_root }}/bin/aeternity"

  tasks:
    - name: Aeternity binary exists
      ansible.builtin.stat:
        path: "{{ aeternity_bin }}"
      register: ae_node
      failed_when: ae_node.stat.exists != True
      changed_when: false
      tags: [daemon]

    - name: Ping aeternity daemon
      ansible.builtin.command: "{{ aeternity_bin }} ping"
      register: ping
      failed_when: false
      changed_when: false
      tags: [daemon]

    - name: Stop aeternity daemon
      ansible.builtin.command: "{{ aeternity_bin }} stop"
      when:
        - ae_node.stat.exists
        - ping.stdout == "pong"
      tags: [daemon]

    - name: Stat aeternity.yaml
      ansible.builtin.stat:
        path: "{{ project_root }}/aeternity.yaml"
      register: config_file

    - name: Read aeternity.yaml contents
      ansible.builtin.command: "cat {{ project_root }}/aeternity.yaml"
      register: cat_output
      when: config_file.stat.exists
      tags: [config]

    - name: Parse YAML configuration
      ansible.builtin.set_fact:
        node_vars: "{{ cat_output.stdout | from_yaml }}"
      when: config_file.stat.exists
      tags: [config]

    - name: Deleting old blockchain
      ansible.builtin.file:
        path: "{{ project_root }}/{{ node_vars.chain.db_path }}/"
        state: absent
      when: config_file.stat.exists
      tags: [config]

    - name: Creating new blockchain folder
      ansible.builtin.file:
        path: "{{ project_root }}/{{ node_vars.chain.db_path }}/"
        state: directory
      when: config_file.stat.exists
      tags: [config]

    - name: Deleting old keys dir
      ansible.builtin.file:
        path: "{{ project_root }}/{{ node_vars.keys.dir | default('keys') }}/"
        state: absent
      when: config_file.stat.exists
      tags: [config]

    - name: Creating new keys dir
      ansible.builtin.file:
        path: "{{ project_root }}/{{ node_vars.keys.dir | default('keys') }}/"
        state: directory
      when: config_file.stat.exists
      tags: [config]

    - name: Deleting old log files
      ansible.builtin.file:
        path: "{{ project_root }}/log/"
        state: absent
      tags: [config]

    - name: Creating new log folder
      ansible.builtin.file:
        path: "{{ project_root }}/log/"
        state: directory
      tags: [config]

    - name: Start aeternity daemon
      ansible.builtin.command: "{{ aeternity_bin }} start"
      when: ae_node.stat.exists
      tags: [daemon]

  post_tasks:
    - name: Run health checks
      ansible.builtin.include_tasks: tasks/health_check.yml
      vars:
        healthcheck_port: "{{ node_vars.http.external.port }}"
