# Collect and prepare datadog tags from instance metadata and tags on AWS
# Couple of the tags defaults to OS values,
# still color and env must be passed externally for that platform
- name: Collect cloud instance metadata
  hosts: all
  remote_user: master
  become: yes
  gather_facts: yes
  tags: [datadog]
  tasks:
    - name: Get instance metadata facts
      ec2_metadata_facts:
      when: '"amazon" in ansible_bios_version'

    - name: Define ec2 dynamic variables
      set_fact:
        platform: aws
        region: "{{ ansible_ec2_placement_region }}"
      when: '"amazon" in ansible_bios_version'

    - name: Get instance tags
      ec2_tag:
        resource: "{{ ansible_ec2_instance_id }}"
        state: list
        region: "{{ ansible_ec2_placement_region }}"
      register: instance_tags
      when: ansible_ec2_instance_id is defined

    - name: Define ec2 dynamic variables based on tags
      set_fact:
        env: "{{ instance_tags['tags']['env'] | default('unknown') }}"
        color: "{{ instance_tags['tags']['color'] | default('unknown') }}"
      when: ansible_ec2_instance_id is defined

- name: Configure monitoring services (DataDog)
  hosts: all
  remote_user: master
  become: yes
  gather_facts: no
  tags: [datadog]

  vars:
    project_user: epoch
    datadog_api_key: "{{ vault_datadog_api_key|default('DATADOG_API_KEY') }}"
    datadog_agent6: true
    datadog_config:
      apm_enabled: false
      use_dogstatsd: true
      process_config:
        enabled: "true" # has to be set as a string
      logs_enabled: true
      hostname: "{{ ansible_fqdn }}"
      tags:
        - "platform:{{ platform|default('os') }}"
        - "region:{{ region|default('eu-east') }}"
        - "env:{{ env|default('unknown') }}"
        - "color:{{ color|default('unknown') }}"
        - "lsb:{{ ansible_lsb.description }}"
        - "flavor:c{{ ansible_processor_vcpus }}.m{{ (ansible_memtotal_mb/1024)|round|int }}"
        - "public_ipv4:{{ public_ipv4 }}"
    datadog_checks:
      system_core:
        init_config:
        instances:
          # The Agent just needs one item in instances in order to enable the check.
          # The content of the item doesnâ€™t matter.
          - foo: bar
      process:
        init_config:
        instances:
          - name: ssh
            search_string: ['sshd']
          - name: epoch
            search_string: ['beam.smp']
          - name: epmd
            search_string: ['epmd']
            thresholds:
              warning: [1, 1]
      http_check:
        init_config:
        instances:
          - name: API
            url: "{{ api_base_uri|default('http://127.0.0.1:3013/v2') }}/blocks/top"
            # Default is false, i.e. emit events instead of service checks.
            # Recommend to set to true.
            skip_event: true
      logs_agent:
        init_config:
        instances:
        logs:
          - type: file
            path: "/home/{{ project_user }}/node/log/epoch.log"
            service: epoch
            source: lager
            sourcecategory: epoch
          - type: file
            path: "/home/{{ project_user }}/node/log/epoch_mining.log"
            service: epoch
            source: lager
            sourcecategory: mining
          - type: file
            path: "/home/{{ project_user }}/node/log/epoch_pow_cuckoo.log"
            service: epoch
            source: lager
            sourcecategory: pow
          - type: file
            path: "/home/{{ project_user }}/node/log/epoch_sync.log"
            service: epoch
            source: lager
            sourcecategory: sync

  pre_tasks:
    - name: "Add dd-agent to {{ project_user }} group"
      user:
        name: dd-agent
        groups: "{{ project_user }}"
        append: yes

  roles:
    - { role: Datadog.datadog }
