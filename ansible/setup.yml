---
- name: Configure node servers
  hosts: all
  remote_user: master
  become: true

  vars:
    project_user: aeternity
    aemdw_user: ubuntu
    vault_version: "0.11.3"
    libsodium_version: "1.0.16"
    libsodium_module_version: "23.1.0"
    fail2ban_enable: true
    fail2ban_loglevel: INFO
    fail2ban_bantime: 86400
    fail2ban_maxretry: 3
    fail2ban_logtarget: SYSLOG
    fail2ban_action: action_
    fail2ban_services:
      - name: ssh
        port: ssh
        filter: sshd
        logpath: /var/log/auth.log
    restart_ssh: true

  tasks:
    - name: Create aeternity daemon user
      ansible.builtin.user:
        name: "{{ project_user }}"
        shell: /bin/bash
      tags:
        - project-user

    - name: Create master user
      ansible.builtin.user:
        name: master
        shell: /bin/bash
      tags:
        - master-user

    - name: Disallow root SSH access
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
      tags:
        - root-user
      notify: restart ssh

    - name: Download Vault public key
      ansible.builtin.get_url:
        url: "{{ vault_addr }}/v1/ssh/public_key"
        dest: /etc/ssh/trusted-user-ca-keys.pem
      when: vault_addr is defined
      tags:
        - ssh-keys
        - developer-ssh-keys
      notify: restart ssh

    - name: Setup trusted CA in sshd config
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^TrustedUserCAKeys'
        line: 'TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem'
      when: vault_addr is defined
      tags:
        - ssh-keys
        - developer-ssh-keys
      notify: restart ssh

    - name: Install GPG
      ansible.builtin.apt:
        state: present
        update_cache: true
        pkg:
          - gnupg
      tags:
        - dev-tools

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install dev and ops tools
      ansible.builtin.apt:
        state: present
        update_cache: true
        pkg:
          - sudo
          - acl
          - docker-ce
          - build-essential
          - python3-pip
          - python3-distutils
          - python3-apt
          - python3-yaml # aeternity.fact
          - python3-docker
          - libssl-dev
          - libffi-dev
          - jq
          - unzip
          - bc
          - curl
          - zstd
      tags:
        - dev-tools

    - name: Prepare pip
      ansible.builtin.pip:
        name:
          - pip==21.3.1
      tags:
        - dev-tools

    - name: Install pip dependencies
      ansible.builtin.pip:
        name:
          # Keep in sync with requirements.txt
          - ansible==9.2.0
          - awscli==1.32.45
          - boto3==1.34.45
          - boto==2.49.0
          - datadog==0.43.0
          - hvac==1.2.1
          - wheel==0.37.1
          # temporary fix for https://github.com/docker/docker-py/issues/3256
          - requests==2.31.0
      # "pip3 install ansible" fails otherwise
      # see https://github.com/pypa/pip/issues/10219#issuecomment-887337037
      environment:
        LANG: C.UTF-8
        LC_ALL: C.UTF-8
      tags:
        - dev-tools

    - name: Add user '{{ item ~ "to docker group" }}'
      ansible.builtin.user:
        name: '{{ item }}'
        groups: docker
        append: true
      loop: ['ubuntu', 'master', 'aeternity']

    - name: Create Vault source directory
      ansible.builtin.file:
        path: /usr/src/vault-{{ vault_version }}/
        state: directory
      tags:
        - vault-install

    - name: Download and unarchive Vault binary
      ansible.builtin.unarchive:
        src: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
        dest: /usr/src/vault-{{ vault_version }}/
        creates: /usr/src/vault-{{ vault_version }}/vault
        remote_src: true
      tags:
        - vault-install

    - name: Install Vault binary
      ansible.builtin.copy:
        src: /usr/src/vault-{{ vault_version }}/vault
        dest: /usr/bin/vault
        mode: '0755'
        remote_src: true
      tags:
        - vault-install

    - name: "Create custom fact directory"
      ansible.builtin.file:
        path: "/etc/ansible/facts.d"
        state: "directory"
      tags:
        - ansible-facts

    - name: "Install aeternity.fact file"
      ansible.builtin.copy:
        src: files/aeternity.fact
        dest: /etc/ansible/facts.d/aeternity.fact
        mode: '0755'
      tags:
        - ansible-facts

    - name: Increase ulimit
      community.general.pam_limits:
        domain: "{{ project_user }}"
        limit_type: soft
        limit_item: nofile
        value: 24576

    - name: Include task to install Ubuntu {{ ansible_distribution_version ~ 'dependencies' }}
      ansible.builtin.include_tasks: tasks/{{ ansible_distribution | lower }}_{{ ansible_distribution_release | lower }}.yml
      tags: vars

    - name: Attach additional drive if needed
      ansible.builtin.include_tasks: tasks/additional_storage.yml

  handlers:
    - name: Run ldconfig
      ansible.builtin.command: ldconfig
      listen: run ldconfig

    - name: Restart ssh
      ansible.builtin.service:
        name: ssh
        state: restarted
        use: service_mgr | default(ansible_service_mgr)
      listen: restart ssh
      when: restart_ssh | bool

  roles:
    - role: fail2ban
      when: fail2ban_enable | bool
