---
- name: Rename epoch user
  hosts: all
  remote_user: master
  become: yes

  vars:
    project_new_user: aeternity
    project_old_user: epoch
    project_old_group: "{{ project_old_user }}"
    project_new_group: "{{ project_new_user }}"
    project_new_home: /home/aeternity
    project_old_home: /home/epoch
    project_root: "{{ project_old_home }}/node/"

  tasks:
    - name: Check if epoch user exists
      getent:
        database: passwd
        key: "{{ project_old_user }}"
        split: ':'
        fail_key: False
      register: old_user_present

    - name: Check if epoch group exists
      getent:
        database: group
        key: "{{ project_old_user }}"
        split: ':'
        fail_key: False
      register: old_group_present

    - name: Check aeternity binary
      stat:
        path: "{{ project_root }}/bin/aeternity"
      register: ae_node

    - name: Ping aeternity node
      command: "{{ project_root }}/bin/aeternity ping"
      failed_when: no
      register: ping
      when: ae_node.stat.exists == True

    - name: Stop aeternity node
      command: "{{ project_root }}/bin/aeternity stop"
      register: stopped
      when: ae_node.stat.exists == True and ping.stdout == "pong" and
            old_user_present.ansible_facts.getent_passwd.epoch != None

    - name: Find epmd binary
      find:
        paths:
          - "{{project_old_home}}"
          - "{{ project_new_home }}"
        patterns:
          - .*epmd$
        use_regex: yes
        exclude: .*.beam
        recurse: yes
        file_type: file
      register: epmd_path

    - name: Stop epmd leftover process
      command: "{{ epmd_path.files[0].path }} -kill"
      when: old_user_present.ansible_facts.getent_passwd.epoch != None

    - name: Rename group
      command: "groupmod -n {{ project_new_group }} {{ project_old_group }}"
      when: old_group_present.ansible_facts.getent_group.epoch != None

    - name: Rename user
      command: "usermod -m -d {{ project_new_home }} -l {{ project_new_user }} {{ project_old_user }}"
      when: old_user_present.ansible_facts.getent_passwd.epoch != None

    - name: Create /home/epoch symlink
      file:
        src: "{{ project_new_home }}"
        dest: "{{ project_old_home }}"
        owner: "{{ project_new_user }}"
        group: "{{ project_new_user }}"
        state: link
      when: old_user_present.ansible_facts.getent_passwd.epoch != None

    - name: Start aeternity node
      command: "{{ project_root }}/bin/aeternity start"
      when: old_user_present.ansible_facts.getent_passwd.epoch != None
