heat_template_version: 2013-05-23
description: Aeternity environment stack

parameters:
    env_name:
        type: string
        label: Environment name
    meta_groups:
        type: string
        label: Comma separataed list of metadata groups
        description: Groups used do manage ansible dynamic inventory
        default: "epoch"
    node_count:
        type: number
        label: Nodes Count
        description: Number of epoch nodes
        default: 2
        constraints:
          - range: { min: 2 }
            description: Nodes Count must be at least 2
    node_flavor:
        type: string
        label: Node Instance Type
        description: Type of instance (flavor) to deploy for the epoch node
        default: c1.medium
        constraints:
          - custom_constraint: nova.flavor
    key_name:
        type: string
        label: Key Name
        description: SSH key to be used for all instances
        default: "Travis Master"
        constraints:
          - custom_constraint: nova.keypair
    image_name:
        type: string
        label: Image Name
        description: Image name to create node servers
        default: "Ubuntu 16.04"
    api_port:
        type: number
        label: API port number
        description: Port number of epoch node API
        default: 3013

resources:
  management_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Allow node management from internet (ICMP, SSH, API)
      name:
        str_replace:
          template: ae-%env_name%-management
          params:
            "%env_name%": { get_param: env_name }
      rules:
        - direction: ingress
          remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: { get_param: api_port }
          port_range_max: { get_param: api_port }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: tcp, port_range_min: 22, port_range_max: 22}
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp }

  epoch_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Full access between epoch nodes in their environment
      name:
        str_replace:
          template: ae-%env_name%-nodes
          params:
            "%env_name%": { get_param: env_name }
      rules:
        # Allow all outgoing connections to Internet
        - { direction: egress, remote_ip_prefix: 0.0.0.0/0}
        # All all incoming connection from the same security group
        - { direction: ingress, remote_mode: remote_group_id }

  epoch_servers:
      type: OS::Heat::ResourceGroup
      properties:
          count: { get_param: node_count }
          resource_def:
              type: OS::Nova::Server
              properties:
                name:
                    str_replace:
                        template: ae-%env_name%-epoch-n%index%
                        params:
                          "%env_name%": { get_param: env_name }
                image: { get_param: image_name }
                flavor: { get_param: node_flavor }
                key_name: { get_param: key_name }
                metadata:
                  groups: { get_param: meta_groups }
                networks:
                  - network: ext-net
                security_groups:
                  - {get_resource: management_security_group}
                  - {get_resource: epoch_security_group}
